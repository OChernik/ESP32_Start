// Настройки____________________________________________________________________
const char* ssid = "*********";      // wifi Login
const char* password = "********";   // wifi Password
const char* otaHostname = "*****";   // OTA Hostname - видимое в сети имя контроллера
const char* otaPass = "*********";   // OTA Password - пароль для загрузки скетча в контроллер по воздуху

// Библиотеки_______________________________________________________________
#include <Arduino.h>
#include <WiFi.h>        //библиотека для управления WiFi
#include <ArduinoOTA.h>  //библиотека ОТА обновления по WiFi
#include <ESPmDNS.h>     // нужно для работы бибилиотеки ArduinoOTA.h
#include <WiFiUdp.h>     // нужно для работы бибилиотеки ArduinoOTA.h

// Переменные_______________________________________________________________
int ledPin = 5;          // задаем выход для мигания встроенным LED

// Функции__________________________________________________________________

// Функция устанавливает WiFi соединения
void initWiFi() {
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi ..");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(1000);
  }
  Serial.println(WiFi.localIP());
}  // end void initWiFi()

// Setup______________________________________________________________________________________________
void setup() {
  Serial.begin(115200);
  pinMode (ledPin, OUTPUT);   // задаем ledPin как выход
  initWiFi();  // установили соединение WiFi

// библиотека ArduinoOTA.h делает все нужное для работы ОТА
  ArduinoOTA
    .onStart([]() {
      String type;
      if (ArduinoOTA.getCommand() == U_FLASH)
        type = "sketch";
      else  // U_SPIFFS
        type = "filesystem";

      // NOTE: if updating SPIFFS this would be the place to unmount SPIFFS using SPIFFS.end()
      Serial.println("Start updating " + type);
    })
    .onEnd([]() {
      Serial.println("\nEnd");
    })
    .onProgress([](unsigned int progress, unsigned int total) {
      Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
    })
    .onError([](ota_error_t error) {
      Serial.printf("Error[%u]: ", error);
      if (error == OTA_AUTH_ERROR) Serial.println("Auth Failed");
      else if (error == OTA_BEGIN_ERROR) Serial.println("Begin Failed");
      else if (error == OTA_CONNECT_ERROR) Serial.println("Connect Failed");
      else if (error == OTA_RECEIVE_ERROR) Serial.println("Receive Failed");
      else if (error == OTA_END_ERROR) Serial.println("End Failed");
    });

  ArduinoOTA.setHostname(otaHostname);    // задали видимое в сети имя контроллера
  ArduinoOTA.setPassword(otaPass);        // задали пароль для загрузки скетча по воздуху
  ArduinoOTA.begin();                     // запустили модуль ArduinoOTA

}  // end void Setup()

// Loop_______________________________________________________________________________________________
void loop() {
  
  ArduinoOTA.handle();   // поддерживаем работу ОТА

  digitalWrite (ledPin, HIGH);	// включаем LED
  delay(500);	                  // пауза 500 мс
  digitalWrite (ledPin, LOW);	  // выключаем LED
  delay(500);	                  // пауза 500 мс

  // восстанавливаем WiFi соединение при случайной пропаже
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("Reconnecting to WiFi...");
    WiFi.disconnect();
    initWiFi();  // установили соединение WiFi
  } // end if

}  // end Loop
